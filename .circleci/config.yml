---
version: 2.1

commands:
  run_with_languages:
    description: "Run the given command in an environment that includes relevant langauges in the PATH"
    parameters:
      command:
        type: string
        description: "What command to execute"
      label:
        type: string
        description: "What to label the run"
        default: <<parameters.command>>
    steps:
      - run:
          name: <<parameters.label>>
          command: |
            export PATH="${HOME}/.pyenv/bin:${PATH}"
            export PATH="${HOME}/.rbenv/bin:${HOME}/.rbenv/shims:${PATH}"
            export PATH="${HOME}/project/node_modules/.bin:${PATH}"
            export PATH="$(pwd)/bin:${PATH}"
            eval "$(pyenv init --path)"
            eval "$(pyenv virtualenv-init -)"
            eval "$(rbenv init -)"

            <<parameters.command>>
          environment:
            # https://app.circleci.com/pipelines/github/apiology/cookiecutter-pypackage/4/workflows/29074dc8-944c-4600-8aaa-5116575fed90/jobs/4
            "LC_ALL": "C.UTF-8"
            "LANG": "C.UTF-8"
          no_output_timeout: "30m"
  set_up_environment:
    description: "Install source environment"
    steps:
      - checkout
      - run:
          name: Update timestamps to original commit time
          command: |
            git ls-tree -r --name-only HEAD | while read filename; do \
              unixtime=$(git log -1 --format="%at" -- "${filename}")
              touchtime=$(date -d @$unixtime +'%Y%m%d%H%M.%S')
              touch -ht ${touchtime} "${filename}"
            done
      - restore_cache:
          name: Restore child rbenv cache
          keys:
            - child-rbenv-v3-{{ checksum "{{cookiecutter.project_slug}}/Gemfile.patch" }}-{{ checksum "hooks/post_gen_project.py" }}- # yamllint disable-line rule:line-length
            - child-rbenv-v3-{{ checksum "{{cookiecutter.project_slug}}/Gemfile.patch" }}-
            - child-rbenv-v3-
            - child-rbenv-
      - restore_cache:
          name: Restore pyenv cache
          keys:
            - pyenv-v2-{{ checksum "requirements_dev.txt" }}-
            - pyenv-v2-
            - pyenv-
      - run:
          name: Initialize packages
          command: |
            # measuring slows down the script - only enable when you
            # want to debug where this is spending time

            # export FIX_SH_TIMING_LOG=/tmp/fix_sh_timing.log

            PATH="$(pwd)/bin:${PATH}"
            export PATH

            './fix.sh'

            export PATH="${HOME}/.rbenv/bin:${HOME}/.rbenv/shims:${PATH}"
            eval "$(rbenv init -)"

            # Use most recent Ruby version as the global version;
            # needed when we run 'rails new'
            rbenv global $(rbenv versions --bare | tail -1)
      - store_artifacts:
          path: /tmp/fix_sh_timing.log
      - save_cache:
          name: 'Save pyenv cache'
          key: pyenv-v2-{{ checksum "requirements_dev.txt" }}-{{ checksum ".python-version" }}
          paths:
            - "requirements_dev.txt.installed"
            - "/home/circleci/.cache/pip/wheels"
            - "/home/circleci/.pyenv"
      - run:
          name: Download new circleci tool
          command: |
            curl -fLSs \
            https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
  quality:
    description: "Quality checks"
    steps:
      - set_up_environment
      - run_with_languages:
          label: Run overcommit
          command: |
            # Coax overcommit into working
            git config --global user.email "test@test.test"
            git config --global user.name "Test Test"
            bin/overcommit --sign
            bin/overcommit --sign pre-commit
            bin/overcommit --sign pre-push


            bin/overcommit --run
  tox:
    description: "Run tox"
    parameters:
      tox_arguments:
        type: string
        default: ''
        description: "Which tox arguments to pass"
    steps:
      - run_with_languages:
          label: Test
          command: |
            # These will be used in post_gen_project.py while testing
            # the cookies, as well as by overcommit
            git config --global user.email "test@test.test"
            git config --global user.name "Test Test"
            # Coax overcommit into working
            bundle exec overcommit --sign
            bundle exec overcommit --sign pre-commit

            tox <<parameters.tox_arguments>>

            bin/overcommit --run
jobs:
  quality:
    working_directory: ~/cookiecutter-rails
    docker:
      - image: cimg/base:current
    steps:
      - quality
  build:
    working_directory: ~/cookiecutter-rails
    docker:
      - image: cimg/base:current
    steps:
      - set_up_environment
      - run_with_languages:
          label: Typecheck
          command: make citypecheck citypecoverage
      - unless:
          condition:
            equal: [<< pipeline.git.branch >>, "main"]
          steps:
            # skip tox to speed things by not installing another
            # virtualenv, and only run in default Python version.
            - run_with_languages:
                label: Test
                command: |
                  # These will be used in post_gen_project.py while testing
                  # the cookies, as well as by overcommit
                  git config --global user.email "test@test.test"
                  git config --global user.name "Test Test"
                  # Coax overcommit into working
                  bundle exec overcommit --sign
                  bundle exec overcommit --sign pre-commit

                  # Set timezone as same on dev box for test consistency

                  # https://stackoverflow.com/questions/44331836/apt-get-install-tzdata-noninteractive
                  sudo ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
                  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
                  export TZ=America/New_York
                  date

                  # measuring slows down the script - only enable when you
                  # want to debug where this is spending time

                  # export FIX_SH_TIMING_LOG=/tmp/child_fix_sh_timing.log

                  sudo ln -sf /bin/cp /bin/gcp

                  make citest cicoverage
            - store_artifacts:
                path: /tmp/child_fix_sh_timing.log
            - save_cache:
                name: 'Save child rbenv cache'
                key: child-rbenv-v3-{{ checksum "{{cookiecutter.project_slug}}/Gemfile.patch" }}-{{ checksum "hooks/post_gen_project.py" }}-{{ checksum "Gemfile.lock" }}-{{ checksum ".ruby-version" }} # yamllint disable-line rule:line-length
                paths:
                  - "Gemfile.lock.installed"
                  - "vendor/.keep"
                  - "vendor/bundle"
                  - "/home/circleci/.rbenv"
                  - "/home/circleci/.cache/solargraph"
                  - "/home/circleci/.sorbet-cache"
                  - "/home/circleci/.cache/sorbet"
                  - "/home/circleci/.cache/rubocop_cache"
                  - "/home/circleci/.cache/gem"
                  - "/home/circleci/.bundle/cache"
                  - ".bundle"
                  - ".ruby-version"
      - when:
          condition:
            equal: [<< pipeline.git.branch >>, "main"]
          steps:
            - tox
      - run:
          label: Verify deltas
          command: |
            if [ -n "$(git status --porcelain)" ]
            then
              git status --porcelain
              git diff -u .
              >&2 echo "Please check in all files"
              exit 1
            fi
    # This seemed to shave 5ish% of the build time off when added
    resource_class: xlarge

workflows:
  version: 2
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 6"
          filters:
            branches:
              only:
                - main
    jobs:
      - build
      - quality
  quality:
    jobs:
      - quality
  build:
    jobs:
      - build
