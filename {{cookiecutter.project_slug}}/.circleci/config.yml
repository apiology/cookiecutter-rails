---
version: 2.1

commands:
  run_with_languages:
    description: "Run the given command in an environment that includes relevant langauges in the PATH"
    parameters:
      command:
        type: string
        description: "What command to execute"
      label:
        type: string
        description: "What to label the run"
        default: <<parameters.command>>
    steps:
      - run:
          name: <<parameters.label>>
          command: |
            export PATH="${HOME}/.pyenv/bin:${PATH}"
            export PATH="${HOME}/.rbenv/bin:${HOME}/.rbenv/shims:${PATH}"
            export PATH="${HOME}/project/node_modules/.bin:${PATH}"
            eval "$(pyenv init --path)"
            eval "$(pyenv virtualenv-init -)"
            eval "$(rbenv init -)"
            export BUNDLE_PATH=vendor/bundle

            <<parameters.command>>
          environment:
            # https://app.circleci.com/pipelines/github/apiology/cookiecutter-pypackage/4/workflows/29074dc8-944c-4600-8aaa-5116575fed90/jobs/4
            "LC_ALL": "C.UTF-8"
            "LANG": "C.UTF-8"
  set_up_environment:
    description: "Install source environment"
    steps:
      - checkout
      - restore_cache:
          key: gems-v2-{% raw %}{{ checksum "Gemfile.lock" }}{% endraw %}
      - restore_cache:
          key: wheels-v1-3.12.1-{% raw %}{{ checksum "requirements_dev.txt" }}{% endraw %}
      - run:
          name: Initialize packages
          command: |
            export BUNDLE_PATH=vendor/bundle
            './fix.sh'
      - run:
          name: Verify Gemfile.lock
          command: |
            if ! git diff --exit-code Gemfile.lock
            then
              >&2 echo "Please resolve changes to Gemfile.lock after bundle install to avoid caching difficulties"
              exit 1
            fi
      - save_cache:
          key: gems-v2-{% raw %}{{ checksum "Gemfile.lock" }}{% endraw %}
          paths:
            - "vendor/bundle"
      - save_cache:
          key: wheels-v1-3.12.1-{% raw %}{{ checksum "requirements_dev.txt" }}{% endraw %}
          paths:
            - "/home/circleci/.cache/pip/wheels"
            - "/home/circleci/.pyenv/versions/3.12.1/envs/{{cookiecutter.project_slug}}-3.12.1"
            - "/home/circleci/.pyenv/versions/{{cookiecutter.project_slug}}-3.12.1"
      - run:
          name: Download new circleci tool
          command: |
            curl -fLSs \
            https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
  overcommit:
    description: "Run overcommit"
    steps:
      - set_up_environment
      - run_with_languages:
          label: Run overcommit
          command: |
            # Coax overcommit into working
            git config --global user.email "test@test.test"
            git config --global user.name "Test Test"
            bundle exec overcommit --sign
            bundle exec overcommit --sign pre-commit

            bundle exec overcommit --run

jobs:
  overcommit:
    working_directory: ~/{{cookiecutter.project_slug}}
    docker:
      - image: apiology/circleci-ruby:latest
    steps:
      - overcommit
  build:
    working_directory: ~/{{cookiecutter.project_slug}}
    docker:
      - image: apiology/circleci-ruby:latest
        environment:
          {{cookiecutter.project_slug|upper}}_TEST_DATABASE_DATABASE: {{cookiecutter.project_slug}}_test
          {{cookiecutter.project_slug|upper}}_DATABASE_USERNAME: {{cookiecutter.project_slug}}
          {{cookiecutter.project_slug|upper}}_TEST_DATABASE_PASSWORD: ""
          {{cookiecutter.project_slug|upper}}_TEST_DATABASE_SERVER: localhost
          {{cookiecutter.project_slug|upper}}_TEST_DATABASE_PORT: "5432"
          RAILS_ENV: test
      # https://thoughtbot.com/blog/circleci-2-rails
      - image: postgres:latest
        environment:
          POSTGRES_USER: {{cookiecutter.project_slug}}
          POSTGRES_DB: {{cookiecutter.project_slug}}_test
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - set_up_environment
      - run_with_languages:
          label: Test
          command: |
            # https://thoughtbot.com/blog/circleci-2-rails
            # Wait for DB
            dockerize -wait tcp://localhost:5432 -timeout 1m
            make citest cicoverage
    # This seemed to shave 5ish% of the build time off when added
    resource_class: large

workflows:
  version: 2
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 6"
          filters:
            branches:
              only:
                - main
    jobs:
      - build
      - overcommit
  overcommit:
    jobs:
      - overcommit
  build:
    jobs:
      - build
